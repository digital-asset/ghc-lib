# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: false
  branches:
    include:
    - master

# Enable PR triggers that target the master branch
pr:
  autoCancel: true # cancel previous builds on push
  branches:
    include:
    - master

strategy:
  # Limit number of executors used so other pipelines can run too
  maxParallel: 10
  matrix:
    # Notes:
    #  Tags are encoded in the following way:
    #        <os> '-' <ghc-lib> '-' <compiler>
    #  Not every combination is tested
    #  - We do sampling to keep the number of builds reasonable;
    #  - Minimum GHC needed to bootstrap:
    #      +--------------+-------------+
    #      | GHC flavor   |  version    |
    #      +==============+=============+
    #      | ghc-8.8.*    |  >= 8.4.4   |
    #      | ghc-8.10.*   |  >= 8.6.5   |
    #      | ghc-9.0.*    |  >= 8.8.1   |
    #      | ghc-9.2.*    |  >= 8.10.1  |
    #      | ghc-9.4.1    |  >= 9.0.1   |
    #      | ghc-9.6.2    |  >= 9.2.2   | (9.2.1 is invalid)
    #      | > ghc-9.6.2  |  >= 9.2.2   |
    #      +--------------+-------------+
    # (the general rule is only the last two compiler versions are
    # supported).

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavor  | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-master      | ghc-9.6.3  |
    # | macOS   | ghc-master      | ghc-9.6.3  |
    # | windows | ghc-master      | ghc-9.6.3  |
    # +---------+-----------------+------------+
    linux-ghc-master-9.6.3:
      image: "ubuntu-22.04"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.6.3"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-master-9.6.3:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.6.3"
      stack-yaml: "stack-exact.yaml"
    windows-ghc-master-9.6.3:
      image: "windows-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.6.3"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavor  | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-master      | ghc-9.8.1  |
    # | macOS   | ghc-master      | ghc-9.8.1  |
    # | windows | ghc-master      | ghc-9.8.1  |
    # +---------+-----------------+------------+
    linux-ghc-master-9.8.1:
      image: "ubuntu-22.04"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.8.1"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-master-9.8.1:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.8.1"
      stack-yaml: "stack-exact.yaml"
    windows-ghc-master-9.8.1:
      image: "windows-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.8.1"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavor  | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-9.8.1       | ghc-9.6.3  |
    # | macOS   | ghc-9.8.1       | ghc-9.6.3  |
    # | windows | ghc-9.8.1       | ghc-9.6.3  |
    # +---------+-----------------+------------+
    linux-ghc-9.8.1-9.6.3:
      image: "ubuntu-22.04"
      mode: "--ghc-flavor ghc-9.8.1"
      resolver: "ghc-9.6.3"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-9.8.1-9.6.3:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-9.8.1"
      resolver: "ghc-9.6.3"
      stack-yaml: "stack-exact.yaml"
    windows-ghc-9.8.1-9.6.3:
      image: "windows-latest"
      mode: "--ghc-flavor ghc-9.8.1"
      resolver: "ghc-9.6.3"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavor  | GHC        |
    # +=========+=================+============+
    # | linux   | da-ghc-8.8.1    | ghc-8.8.1  |
    # | windows | da-ghc-8.8.1    | ghc-8.8.1  |
    # | macOS   | da-ghc-8.8.1    | ghc-8.8.1  |
    # +---------+-----------------+------------+
    linux-da-ghc-8.8.1-8.8.1:
      image: "ubuntu-22.04"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    windows-da-ghc-8.8.1-8.8.1:
      image: "windows-latest"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    mac-da-ghc-8.8.1-8.8.1:
      image: "macOS-latest"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"

pool: {vmImage: '$(image)'}

steps:
  # windows
  - bash: |
      if [ -d patches ]; then
        /usr/bin/find patches -name "*.patch" -exec dos2unix {} \;
      fi
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  # macOS
  - bash: |
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      brew install automake
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Install brew
  - bash: |
      curl -sSL https://get.haskellstack.org/ | sh -s - -f
    displayName: install Stack
  - bash: |
      set -euo pipefail

      version=$(curl -Is https://github.com/ndmitchell/hlint/releases/latest | grep location: | sed 's|.*/||' | tr -d '\n\r')
      echo "VERSION: $version"

      temp=$(mktemp -d)
      curl -sSL https://github.com/ndmitchell/hlint/releases/download/$version/hlint-${version#v}-x86_64-linux.tar.gz > $temp/tarball

      tar -xzf $temp/tarball -C$temp

      hlint() (
        echo
        echo DEBUG: hlint "$@"
        $temp/hlint-${version#v}/hlint "$@"
      )
      hlint CI.hs
      hlint ghc-lib-gen
      hlint examples/ghc-lib-test-utils/src
      series=( GHC_8_8 GHC_8_10 GHC_9_0 GHC_9_2 GHC_9_4 GHC_9_6 GHC_9_8 GHC_9_10 )
      for s in "${series[@]}"; do
        hlint examples/ghc-lib-test-mini-hlint/src --cpp-include examples/ghc-lib-test-mini-hlint/extra-source-files --cpp-define "$s"
        hlint examples/ghc-lib-test-mini-compile/src --cpp-include examples/ghc-lib-test-mini-compile/extra-source-files --cpp-define "$s"
      done
    displayName: run hlint
    condition: eq( variables['Agent.OS'], 'Linux' )
  - bash: |
      GHCLIB_AZURE=1;export GHCLIB_AZURE
      stack runhaskell --stack-yaml $(stack-yaml) --resolver $(resolver) --package extra --package optparse-applicative -- CI.hs $(mode)  --stack-yaml $(stack-yaml) --resolver $(resolver)
    displayName: build

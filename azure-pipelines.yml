# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: false
  branches:
    include:
    - master

# Enable PR triggers that target the master branch
pr:
  autoCancel: true # cancel previous builds on push
  branches:
    include:
    - master

strategy:
  # Limit number of executors used so other pipelines can run too
  maxParallel: 10
  matrix:
    # Notes:
    #  Tags are encoded in the following way:
    #        <os> '-' <ghc-lib> '-' <compiler>
    #  Not every combination is tested
    #  - We do sampling to keep the number of builds reasonable;
    #  - No ghc-8.4.4 builds are tested;
    #  - No Windows 8.8.3 builds are tested (ghc-8.8.3 on Windows
    #    has issues);
    #  - Minimum GHC needed to bootstrap:
    #      +--------------+-------------+
    #      | GHC flavor   |  version    |
    #      +==============+=============+
    #      | ghc-8.8.*    |  >= 8.4.4   |
    #      | ghc-8.10.*   |  >= 8.6.5   | (since 2019/09/29, https://gitlab.haskell.org/ghc/ghc/commit/24620182abdfcc65a0cfc0e2f3bc391d464d0ad5)
    #      | ghc-9.0.*    |  >= 8.8.1   | (since 2020/03/31, https://gitlab.haskell.org/ghc/ghc/-/commit/57b888c0e90be7189285a6b078c30b26d092380)
    #      | >= ghc-9.2.1 |  >= 8.10.1  | (since 2021/03/10, https://gitlab.haskell.org/ghc/ghc/-/commit/0a709dd9876e40c19c934692415c437ac434318c)
    #      +--------------+-------------+

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-master      | ghc-9.2.2  |
    # | macOS   | ghc-master      | ghc-9.2.2  |
    # +---------+-----------------+------------+
    linux-ghc-master-9.2.2:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.2.2"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-master-9.2.2:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-9.2.2"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-9.4.1       | ghc-9.2.2  |
    # | macOS   | ghc-9.4.1       | ghc-9.2.2  |
    # +---------+-----------------+------------+
    linux-ghc-9.4.1-9.2.2:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-9.4.1"
      resolver: "ghc-9.2.2"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-9.4.1-9.2.2:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-9.4.1"
      resolver: "ghc-9.2.2"
      stack-yaml: "stack-exact.yaml"

    # just can't get a build-plan at this time. issues with extra,
    # directory, process & time

    # windows-ghc-master-9.2.2:
    #   image: "windows-latest"
    #   mode: "--ghc-flavor ghc-master"
    #   resolver: "ghc-9.2.2"
    #   stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-master      | ghc-9.0.1  |
    # | macOS   | ghc-master      | ghc-9.0.1  |
    # | linux   | ghc-master      | ghc-8.10.7 |
    # | macOS   | ghc-master      | ghc-8.10.7 |
    # | windows | ghc-master      | ghc-8.10.7 |
    # +---------+-----------------+------------+
    linux-ghc-master-9.0.1:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "nightly-2021-11-14"
      stack-yaml: "stack-901.yaml"
    linux-ghc-master-8.10.7:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "lts-18.16"
      stack-yaml: "stack.yaml"
    mac-ghc-master-9.0.1:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "nightly-2021-11-14"
      stack-yaml: "stack-901.yaml"
    mac-ghc-master-8.10.7:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "lts-18.16"
      stack-yaml: "stack.yaml"
    windows-ghc-master-8.10.7:
      image: "windows-latest"
      mode: "--ghc-flavor ghc-master"
      resolver: "lts-18.23"
      stack-yaml: "stack.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-9.2.2       | ghc-9.0.1  |
    # | macOS   | ghc-9.2.2       | ghc-8.10.7 |
    # +---------+-----------------+------------+
    linux-ghc-9.2.2-9.0.1:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-9.2.2"
      resolver: "nightly-2021-11-14"
      stack-yaml: "stack-901.yaml"
    mac-ghc-9.2.2-8.10.7:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-9.2.2"
      resolver: "lts-18.16"
      stack-yaml: "stack.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-9.0.2       | ghc-8.10.7 |
    # | macOS   | ghc-9.0.2       | ghc-8.8.1  |
    # +---------+-----------------+------------+
    linux-ghc-9.0.2-8.10.7:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-9.0.2"
      resolver: "lts-18.16"
      stack-yaml: "stack.yaml"
    mac-ghc-9.0.2-8.10.7:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-9.0.2"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-8.10.7       | ghc-8.8.1 |
    # | macOS   | ghc-8.10.7       | ghc-8.8.1 |
    # +---------+-----------------+------------+
    linux-ghc-8.10.7-8.8.1:
      image: "ubuntu-latest"
      mode: "--ghc-flavor ghc-8.10.7"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    mac-ghc-8.10.7-8.8.1:
      image: "macOS-latest"
      mode: "--ghc-flavor ghc-8.10.7"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | da-ghc-8.8.1    | ghc-8.8.1  |
    # | windows | da-ghc-8.8.1    | ghc-8.8.1  |
    # | macOS   | da-ghc-8.8.1    | ghc-8.8.1  |
    # +---------+-----------------+------------+
    linux-da-ghc-8.8.1-8.8.1:
      image: "ubuntu-latest"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    windows-da-ghc-8.8.1-8.8.1:
      image: "windows-latest"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    mac-da-ghc-8.8.1-8.8.1:
      image: "macOS-latest"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"

pool: {vmImage: '$(image)'}

steps:
  # macOS
  - bash: |
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      brew install automake
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Install brew
  - script: |
      set -e
      curl -sSL https://get.haskellstack.org/ | sh -s - -f
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s CI.hs
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s ghc-lib-gen
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/test-utils/src
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/mini-hlint/src
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/mini-hlint/test/Main.hs
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/mini-compile/src
  - bash: |
      stack exec -- pacman -Syu --noconfirm
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - bash: |
      stack setup --stack-yaml $(stack-yaml) --resolver $(resolver) > /dev/null
      stack install --stack-yaml $(stack-yaml) --resolver $(resolver) alex happy > /dev/null
      stack exec --stack-yaml $(stack-yaml) --resolver $(resolver) --package extra --package optparse-applicative ghc -- -package extra -package optparse-applicative -Wall -Wno-name-shadowing -Werror -c CI.hs
      stack runhaskell --stack-yaml $(stack-yaml) --resolver $(resolver) --package extra --package optparse-applicative -- CI.hs $(mode)  --stack-yaml $(stack-yaml) --resolver $(resolver)

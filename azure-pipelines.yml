# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: false
  branches:
    include:
    - master

# Enable PR triggers that target the master branch
pr:
  autoCancel: true # cancel previous builds on push
  branches:
    include:
    - master

strategy:
  # Limit number of executors used so other pipelines can run too
  maxParallel: 10
  matrix:
    # Notes:
    #  Tags are encoded in the following way:
    #        <os> '-' <ghc-lib> '-' <compiler>
    #  Not every combination is tested
    #  - We do sampling to keep the number of builds reasonable;
    #  - No ghc-8.4.4 builds are tested;
    #  - No Windows 8.8.3 builds are tested (ghc-8.8.3 on Windows
    #    has issues);
    #  - Minimum GHC needed to bootstrap:
    #      +--------------+------------+
    #      | GHC flavor   |  version   |
    #      +==============+============+
    #      | ghc-8.8.*    |  >= 8.4.4  |
    #      | ghc-8.10.*   |  >= 8.6.5  | (since 09/29/2019, https://gitlab.haskell.org/ghc/ghc/commit/24620182abdfcc65a0cfc0e2f3bc391d464d0ad5)
    #      | ghc-8.11.*   |  >= 8.8.1  | (since 2020/03/31, https://gitlab.haskell.org/ghc/ghc/-/commit/57b888c0e90be7189285a6b078c30b26d092380)
    #      +--------------+------------+

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-master      | ghc-8.10.2 |
    # +---------+-----------------+------------+
    linux-ghc-master-8.10.2:
      image: "Ubuntu 16.04"
      mode: "--ghc-flavor ghc-master"
      resolver: "ghc-8.10.2"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-9.0.1       | ghc-8.10.2 |
    # +---------+-----------------+------------+
    linux-ghc-9.0.1-8.10.2:
      image: "Ubuntu 16.04"
      mode: "--ghc-flavor ghc-9.0.1"
      resolver: "ghc-8.10.2"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-8.10.2      | ghc-8.10.2 |
    # | macOS   | ghc-8.10.2      | ghc-8.10.2 |
    # +---------+-----------------+------------+
    linux-ghc-8.10.2-8.10.2:
      image: "Ubuntu 16.04"
      mode: "--ghc-flavor ghc-8.10.2"
      resolver: "ghc-8.10.2"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-8.10.2-8.10.2:
      image: "macOS-10.14"
      mode: "--ghc-flavor ghc-8.10.2"
      resolver: "ghc-8.10.2"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-8.8.4       | ghc-8.10.2 |
    # | macOS   | ghc-8.8.4       | ghc-8.10.2 |
    # +---------+-----------------+------------+
    linux-ghc-8.8.4-8.10.2:
      image: "Ubuntu 16.04"
      mode: "--ghc-flavor ghc-8.8.4"
      resolver: "ghc-8.10.2"
      stack-yaml: "stack-exact.yaml"
    mac-ghc-8.8.4-8.10.2:
      image: "macOS-10.14"
      mode: "--ghc-flavor ghc-8.8.4"
      resolver: "ghc-8.10.2"
      stack-yaml: "stack-exact.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-master      | ghc-8.8.4  |
    # +---------+-----------------+------------+
    linux-ghc-master-8.8.4:
      image: "Ubuntu 16.04"
      mode: "--ghc-flavor ghc-master"
      stack-yaml: "stack.yaml"
      resolver: "nightly-2020-03-14"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | macOS   | ghc-8.8.4       | ghc-8.8.4  |
    # +---------+-----------------+------------+
    mac-ghc-8.8.4-8.8.4:
      image: "macOS-10.14"
      mode: "--ghc-flavor ghc-8.8.4"
      resolver: "nightly-2020-03-14"
      stack-yaml: "stack.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | ghc-8.10.2      | ghc-8.8.4  |
    # +---------+-----------------+------------+
    linux-ghc-8.10.2-8.8.4:
      image: "Ubuntu 16.04"
      mode: "--ghc-flavor ghc-8.10.2"
      resolver: "nightly-2020-03-14"
      stack-yaml: "stack.yaml"

    # +---------+-----------------+------------+
    # | OS      | ghc-lib flavour | GHC        |
    # +=========+=================+============+
    # | linux   | da-ghc-8.8.1    | ghc-8.8.1  |
    # | windows | da-ghc-8.8.1    | ghc-8.8.1  |
    # | macOS   | da-ghc-8.8.1    | ghc-8.8.1  |
    # +---------+-----------------+------------+
    linux-da-ghc-8.8.1-8.8.1:
      image: "Ubuntu 16.04"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    windows-da-ghc-8.8.1-8.8.1:
      image: "vs2017-win2016"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"
    mac-da-ghc-8.8.1-8.8.1:
      image: "macOS-10.14"
      mode: "--da"
      resolver: "nightly-2020-01-08"
      stack-yaml: "stack.yaml"

pool: {vmImage: '$(image)'}

steps:
  # macOS
  - bash: |
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      brew install automake
      brew upgrade gmp
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Install brew

  - script: |
      curl -sSL https://get.haskellstack.org/ | sh
      set -e
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s CI.hs
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s ghc-lib-gen
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/mini-hlint/src
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/strip-locs/src
      curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s examples/mini-compile/src
      stack setup --stack-yaml $(stack-yaml) --resolver $(resolver) > /dev/null
      stack exec --stack-yaml $(stack-yaml) --resolver $(resolver) --package extra --package optparse-applicative ghc -- -package extra -package optparse-applicative -Wall -Wno-name-shadowing -Werror -c CI.hs
      stack runhaskell --stack-yaml $(stack-yaml) --resolver $(resolver) --package extra --package optparse-applicative -- CI.hs $(mode)  --stack-yaml $(stack-yaml) --resolver $(resolver)
